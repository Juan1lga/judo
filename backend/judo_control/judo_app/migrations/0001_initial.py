# Generated by Django 4.2.11 on 2025-05-13 06:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('trainer', 'Entrenador'), ('competitor', 'Competidor')], default='competitor', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('internacional', 'Internacional'), ('nacional', 'Nacional')], max_length=20)),
                ('event', models.CharField(choices=[('entrenamiento', 'Entrenamiento'), ('combate_oficial', 'Combate Oficial')], max_length=20)),
                ('num_athletes', models.PositiveIntegerField()),
                ('num_fights', models.PositiveIntegerField()),
                ('num_fights_completed', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Competitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('M', 'Masculino'), ('F', 'Femenino')], max_length=1)),
                ('weight_division', models.CharField(max_length=4)),
                ('category', models.CharField(choices=[('sub21', 'Sub 21'), ('primera', '1ra Categoría')], max_length=20)),
                ('years_experience', models.PositiveIntegerField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Fight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fights', to='judo_app.competition')),
                ('competitor1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fights_as_competitor1', to='judo_app.competitor')),
                ('competitor2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fights_as_competitor2', to='judo_app.competitor')),
            ],
        ),
        migrations.CreateModel(
            name='TacticalAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attack_type', models.CharField(blank=True, choices=[('wazari', 'Wazari'), ('yuko', 'Yuko'), ('ippon', 'Ippon')], max_length=20, null=True)),
                ('technique_group', models.CharField(blank=True, choices=[('ashi_waza', 'Ashi Waza'), ('koshi_waza', 'Koshi Waza'), ('kata_te_waza', 'Kata Te Waza'), ('sutemi_waza', 'Sutemi Waza')], max_length=20, null=True)),
                ('is_effective', models.BooleanField(default=False)),
                ('combined_techniques', models.CharField(blank=True, max_length=50, null=True)),
                ('penalty', models.CharField(blank=True, choices=[('shido', 'Shido'), ('hansokumake', 'Hansokumake')], max_length=20, null=True)),
                ('ne_waza_type', models.CharField(blank=True, choices=[('immobilization', 'Control por Inmovilización'), ('dislocation', 'Control por Luxación'), ('strangulation', 'Control por Estrangulación')], max_length=50, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('competitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judo_app.competitor')),
                ('fight', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tactical_actions', to='judo_app.fight')),
            ],
        ),
    ]
